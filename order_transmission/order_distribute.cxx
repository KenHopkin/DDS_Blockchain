// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file order_distribute.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "order_distribute.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

OrderDistribute::OrderDistribute()
{
    // m_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@8e24743
    m_index = 0;
    // m_message com.eprosima.idl.parser.typecode.StringTypeCode@74a10858
    m_message ="";
    // m_remark com.eprosima.idl.parser.typecode.StringTypeCode@23fe1d71
    m_remark ="";

}

OrderDistribute::~OrderDistribute()
{



}

OrderDistribute::OrderDistribute(
        const OrderDistribute& x)
{
    m_index = x.m_index;
    m_message = x.m_message;
    m_remark = x.m_remark;
}

OrderDistribute::OrderDistribute(
        OrderDistribute&& x) noexcept 
{
    m_index = x.m_index;
    m_message = std::move(x.m_message);
    m_remark = std::move(x.m_remark);
}

OrderDistribute& OrderDistribute::operator =(
        const OrderDistribute& x)
{

    m_index = x.m_index;
    m_message = x.m_message;
    m_remark = x.m_remark;

    return *this;
}

OrderDistribute& OrderDistribute::operator =(
        OrderDistribute&& x) noexcept
{

    m_index = x.m_index;
    m_message = std::move(x.m_message);
    m_remark = std::move(x.m_remark);

    return *this;
}

bool OrderDistribute::operator ==(
        const OrderDistribute& x) const
{

    return (m_index == x.m_index && m_message == x.m_message && m_remark == x.m_remark);
}

bool OrderDistribute::operator !=(
        const OrderDistribute& x) const
{
    return !(*this == x);
}

size_t OrderDistribute::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t OrderDistribute::getCdrSerializedSize(
        const OrderDistribute& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.message().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.remark().size() + 1;


    return current_alignment - initial_alignment;
}

void OrderDistribute::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_index;
    scdr << m_message.c_str();
    scdr << m_remark.c_str();

}

void OrderDistribute::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_index;
    dcdr >> m_message;
    dcdr >> m_remark;
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void OrderDistribute::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t OrderDistribute::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& OrderDistribute::index()
{
    return m_index;
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void OrderDistribute::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void OrderDistribute::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& OrderDistribute::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& OrderDistribute::message()
{
    return m_message;
}
/*!
 * @brief This function copies the value in member remark
 * @param _remark New value to be copied in member remark
 */
void OrderDistribute::remark(
        const std::string& _remark)
{
    m_remark = _remark;
}

/*!
 * @brief This function moves the value in member remark
 * @param _remark New value to be moved in member remark
 */
void OrderDistribute::remark(
        std::string&& _remark)
{
    m_remark = std::move(_remark);
}

/*!
 * @brief This function returns a constant reference to member remark
 * @return Constant reference to member remark
 */
const std::string& OrderDistribute::remark() const
{
    return m_remark;
}

/*!
 * @brief This function returns a reference to member remark
 * @return Reference to member remark
 */
std::string& OrderDistribute::remark()
{
    return m_remark;
}

size_t OrderDistribute::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool OrderDistribute::isKeyDefined()
{
    return false;
}

void OrderDistribute::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}
